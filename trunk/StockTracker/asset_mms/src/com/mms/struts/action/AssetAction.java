/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.mms.struts.action;

import java.lang.reflect.InvocationTargetException;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.beanutils.BeanUtils;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;

import com.mms.beans.Dep;
import com.mms.dao.IAssetType;
import com.mms.pojo.Asset;
import com.mms.pojo.AssetType;
import com.mms.pojo.Employee;
import com.mms.service.IBorrowService;
import com.mms.service.ICheckService;
import com.mms.serviceImp.AssetServiceImp;
import com.mms.serviceImp.EmployeeServiceImp;
import com.mms.struts.form.AssetForm;
import com.mms.util.Utils;

/** 
 * MyEclipse Struts
 * Creation date: 10-13-2009
 * 
 * XDoclet definition:
 * @struts.action path="/asset" name="assetForm" scope="request" validate="true"
 * @struts.action-forward name="add" path="/infoManage/addKindForm.jsp"
 */
public class AssetAction extends DispatchAction {
	
	private AssetServiceImp asi;
	public AssetServiceImp getAsi() {
		return asi;
	}

	public void setAsi(AssetServiceImp asi) {
		this.asi = asi;
	}
	private IAssetType at;

	public IAssetType getAt() {
		return at;
	}

	public void setAt(IAssetType at) {
		this.at = at;
	}
	private EmployeeServiceImp esi;
	public EmployeeServiceImp getEsi() {
		return esi;
	}
	public void setEsi(EmployeeServiceImp esi) {
		this.esi = esi;
	}
	
	private IBorrowService ibsi;
	public IBorrowService getIbsi() {
		return ibsi;
	}

	public void setIbsi(IBorrowService ibsi) {
		this.ibsi = ibsi;
	}
	
	private ICheckService ics;

	public ICheckService getIcs() {
		return ics;
	}

	public void setIcs(ICheckService ics) {
		this.ics = ics;
	}

	//列出所有资产
	public ActionForward list(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		
		List asset=asi.listAll();
        Asset a=new Asset();
        List dep=new ArrayList();
        
        for(int i=0;i<asset.size();i++)
        {
        	Dep depcount=new Dep();
        	a=(Asset)asset.get(i);
        	String totaltime=a.getAssetUseTime();
            Long total=Long.valueOf(totaltime);
            String d=Utils.depCount(a,total);
            depcount.setDep(d);
            depcount.setAssetName(a.getAssetName());
            depcount.setAssetNumber(a.getAssetNumber());
            depcount.setAssetState(a.getAssetState());
            depcount.setAssetUseType(a.getAssetUseType());
            depcount.setAssetId(a.getAssetId());
		    dep.add(depcount);		
        }
        request.setAttribute("al", dep);
		return mapping.findForward("listall");
	}
	//按分类列出资产平均折旧率的柱状图
	public ActionForward listavgdepchart(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		
//		List<Asset> asset=asi.listAll();
//        Asset a=new Asset();
 //       List<Dep> dep=new ArrayList<Dep>();
        
 //       for(int i=0;i<asset.size();i++)
 //       {
 // /      	Dep depcount=new Dep();
 //       	a=(Asset)asset.get(i);
 //       	String totaltime=a.getAssetUseTime();
 //           Long total=Long.valueOf(totaltime);
 //           String d=Utils.depCount(a,total);
  //          depcount.setDep(d);
//            depcount.setAssetName(a.getAssetName());
 //           depcount.setAssetNumber(a.getAssetNumber());
 //           depcount.setAssetState(a.getAssetState());
 //           depcount.setAssetUseType(a.getAssetUseType());
 //           depcount.setAssetId(a.getAssetId());
//		    dep.add(depcount);		
 //       }
 //       request.setAttribute("al", dep);
		return mapping.findForward("listdepchart");
	}
	//列出所有资产折旧信息
	public ActionForward listdep(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		
		List asset=asi.listAll();
        Asset a=new Asset();
        List dep=new ArrayList();
        
        for(int i=0;i<asset.size();i++)
        {
        	Dep depcount=new Dep();
        	a=(Asset)asset.get(i);
        	String totaltime=a.getAssetUseTime();
            Long total=Long.valueOf(totaltime);
            String d=Utils.depCount(a,total);
            depcount.setDep(d);
            depcount.setAssetName(a.getAssetName());
            depcount.setAssetNumber(a.getAssetNumber());
            depcount.setAssetState(a.getAssetState());
            depcount.setAssetUseType(a.getAssetUseType());
            depcount.setAssetId(a.getAssetId());
		    dep.add(depcount);		
        }
        request.setAttribute("al", dep);
		return mapping.findForward("listdep");
	}
	
	//列出所查询的资产折旧信息
	public ActionForward listcheckdep(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		String name=request.getParameter("assetName");
		//System.out.print("<<<<<<<<<<<<<<<<<<<<<"+request.getParameter("assetName"));
		Asset as=asi.findByName(name);
		List asset=ics.serchAll(as);//模糊查询查出所有符合要求的
        Asset a=new Asset();
        List dep=new ArrayList();
        
        for(int i=0;i<asset.size();i++)
        {
        	Dep depcount=new Dep();
        	a=(Asset)asset.get(i);
        	String totaltime=a.getAssetUseTime();
            Long total=Long.valueOf(totaltime);
            String d=Utils.depCount(a,total);
            depcount.setDep(d);
            depcount.setAssetName(a.getAssetName());
            depcount.setAssetNumber(a.getAssetNumber());
            depcount.setAssetState(a.getAssetState());
            depcount.setAssetUseType(a.getAssetUseType());
            depcount.setAssetId(a.getAssetId());
		    dep.add(depcount);		
        }
        request.setAttribute("al", dep);
		return mapping.findForward("listcheckdep");
	}
	
    //列出符合报修条件的资产
	public ActionForward fixlist(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		
		Asset asset=new Asset();
		List<Asset> l= asi.listAll(); 
		List dep=new ArrayList();
		for(int i=0;i<l.size();i++)
		{
			asset=(Asset) l.get(i);
			Dep depcount=new Dep();
			if(asset.getAssetState().equals("0"))
			{				
	        	String totaltime=asset.getAssetUseTime();
	            Long total=Long.valueOf(totaltime);
	            String d=Utils.depCount(asset,total);
	            depcount.setDep(d);
	            depcount.setAssetName(asset.getAssetName());
	            depcount.setAssetNumber(asset.getAssetNumber());
	            depcount.setAssetState(asset.getAssetState());
	            depcount.setAssetUseType(asset.getAssetUseType());
	            depcount.setAssetId(asset.getAssetId());
			    dep.add(depcount);
			}
		}
		request.setAttribute("al", dep);
		return mapping.findForward("fixlist");
	}
	public ActionForward addlist(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		
		request.setAttribute("kl", at.findAll());
		request.setAttribute("el", esi.listEmployee());
		return mapping.findForward("addlist");
	}
	//添加资产
	public ActionForward add(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		AssetForm assetForm = (AssetForm) form;
		
		Asset atp=new Asset();
		try {
			BeanUtils.copyProperties(atp, assetForm);
		} catch (IllegalAccessException e) {			
			e.printStackTrace();
		} catch (InvocationTargetException e) {			
			e.printStackTrace();
		}
		Integer assettype=assetForm.getAssetTypeId();
		Integer employee=assetForm.getAssetEmployee();
		atp.setAssetType(new AssetType(assettype));
		atp.setEmployee(new Employee(employee));
		atp.setAssetState("7");
		Date defaultTime=Utils.strToDate("2009-00-00");
		atp.setAssetBuyTime(defaultTime);
		atp.setAssetUseToYear(new Date());
		atp.setAssetUseTime("0");
		asi.addAsset(atp);
		return mapping.findForward("list");
	}
	//列出资产详细信息
	public ActionForward listinfo(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		Asset emp=new Asset();
		String id=request.getParameter("m");
		Integer id1=Integer.parseInt(id);
		emp=asi.findById(id1);		
		request.setAttribute("edit", emp);
		return mapping.findForward("info");
	}
	
	//列出要报废的资产
	public ActionForward rejectlist(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		
		Asset asset=new Asset();
		List<Asset> l= asi.listAll(); 
		List als=new ArrayList();
		for(int i=0;i<l.size();i++)
		{
			asset=(Asset) l.get(i);
			Dep depcount=new Dep();
			if(asset.getAssetState().equals("0"))
			{
				String totaltime=asset.getAssetUseTime();
	            Long total=Long.valueOf(totaltime);
	            String d=Utils.depCount(asset,total);
	            depcount.setDep(d);
	            depcount.setAssetName(asset.getAssetName());
	            depcount.setAssetNumber(asset.getAssetNumber());
	            depcount.setAssetState(asset.getAssetState());
	            depcount.setAssetUseType(asset.getAssetUseType());
	            depcount.setAssetId(asset.getAssetId());
			    als.add(depcount);
			}
		}				
		request.setAttribute("al", als);
		return mapping.findForward("rejectlist");
	}
	//报废资产
	public ActionForward reject(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		Asset rejectasset=new Asset();
		String id=request.getParameter("m");
		Integer id1=Integer.parseInt(id);
		rejectasset=asi.findById(id1);		
		rejectasset.setAssetState("5");
		asi.updateAsset(rejectasset);
		return mapping.findForward("reject");
	}
	
	
	
	//列出申请保修的资产
	public ActionForward fixapplylist(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		Asset asset=new Asset();
		List<Asset> l= asi.listAll(); 
		List<Asset> als=new ArrayList();
		for(int i=0;i<l.size();i++)
		{
			asset=(Asset) l.get(i);
			if(asset.getAssetState().equals("4"))
			{
				asset=asi.findById(asset.getAssetId());
				als.add(asset);
			}
		}
		request.setAttribute("al", als);
		return mapping.findForward("fixapplylist");
	}
	//根据ID列出对应需要保修资产的编号和名称
	public ActionForward fixListById(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		Asset emp=new Asset();
		String id=request.getParameter("m");
		Integer id1=Integer.parseInt(id);
		emp=asi.findById(id1);		
		request.setAttribute("edit", emp);
		return mapping.findForward("fixlistbyid");
	}
	
	//列出可申借的资产
	public ActionForward lendlist(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		Asset asset=new Asset();
		List<Asset> l= asi.listAll(); 
		List als=new ArrayList();
		for(int i=0;i<l.size();i++)
		{
			asset=(Asset) l.get(i);
			Dep depcount=new Dep();
			if(asset.getAssetState().equals("0")&&asset.getAssetUseType().equals("0"))
			{
				String totaltime=asset.getAssetUseTime();
	            Long total=Long.valueOf(totaltime);
	            String d=Utils.depCount(asset,total);
	            depcount.setDep(d);
	            depcount.setAssetName(asset.getAssetName());
	            depcount.setAssetNumber(asset.getAssetNumber());
	            depcount.setAssetState(asset.getAssetState());
	            depcount.setAssetUseType(asset.getAssetUseType());
	            depcount.setAssetId(asset.getAssetId());
			    als.add(depcount);
			}
		}
		request.setAttribute("al", als);
		return mapping.findForward("lendlist");
	}
	//列出申借相关数据表
	public ActionForward lend(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		Asset asset=new Asset();
		
		return mapping.findForward("lendlist");
	}
   //转向资产添置审批
	public ActionForward toAddingReqInfo(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		Asset emp=new Asset();
		String id=request.getParameter("m");
		Integer id1=Integer.parseInt(id);
		emp=asi.findById(id1);		
		request.setAttribute("al", emp);
		return mapping.findForward("toAddingReqInfo");
	}
	//同意添置资产
	public ActionForward addAssetAgree(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		String buy=request.getParameter("buyTime");
		String useto=request.getParameter("useToYear");
		Date buytime=Utils.strToDate(buy);
		Date usetoyear=Utils.strToDate(useto);
		Asset emp=new Asset();
		String id=request.getParameter("m");
		Integer id1=Integer.parseInt(id);
		emp=asi.findById(id1);	
		emp.setAssetBuyTime(buytime);
		emp.setAssetUseToYear(usetoyear);
		emp.setAssetState("0");
		asi.updateAsset(emp);
		return mapping.findForward("addAssetAgree");
	}
	//驳回添置申请
	public ActionForward rejectadd(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		String id=request.getParameter("m");
		Integer idd=Integer.parseInt(id);
		Asset asset=asi.findById(idd);
		asi.deleteAsset(asset);
		return mapping.findForward("rejectadd");
	}
	//检索列表
	public ActionForward checklist(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		
		request.setAttribute("kl", at.findAll());
		request.setAttribute("el", esi.listEmployee());
		return mapping.findForward("checklist");
	}
	//转向addUserForm.jsp
	public ActionForward addUserForm(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		
		
		return mapping.findForward("addUserForm");
	}
}