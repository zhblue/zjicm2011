/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.mms.struts.action;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;

import com.mms.pojo.Asset;
import com.mms.pojo.Borrow;
import com.mms.pojo.Employee;
import com.mms.pojo.Fix;
import com.mms.service.IAssetService;
import com.mms.service.IBorrowService;
import com.mms.service.IEmployeeService;
import com.mms.service.IFixService;
import com.mms.util.Utils;

/** 
 * MyEclipse Struts
 * Creation date: 10-17-2009
 * 
 * XDoclet definition:
 * @struts.action path="/borrow" name="borrowForm" parameter="method" scope="request" validate="true"
 */
public class BorrowAction extends DispatchAction {

	private IAssetService asi;	
	public IAssetService getAsi() {
		return asi;
	}
	public void setAsi(IAssetService asi) {
		this.asi = asi;
	}
	
	private IEmployeeService ies;
	public IEmployeeService getIes() {
		return ies;
	}
	public void setIes(IEmployeeService ies) {
		this.ies = ies;
	}
	
	private IBorrowService ibs;
	public IBorrowService getIbs() {
		return ibs;
	}
	public void setIbs(IBorrowService ibs) {
		this.ibs = ibs;
	}
	
	private IFixService ifs;
	public IFixService getIfs() {
		return ifs;
	}
	public void setIfs(IFixService ifs) {
		this.ifs = ifs;
	}
	//转向lendForm.jsp
	public ActionForward tolendform(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		Asset emp=new Asset();
		String id=request.getParameter("m");
		Integer id1=Integer.parseInt(id);
		emp=asi.findById(id1);		
		request.setAttribute("edit", emp);
		
		return mapping.findForward("tolendform");
	}
	//申借资产
	public ActionForward borrow(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		Borrow borrow=new Borrow();
		String id=request.getParameter("m");
		Integer id1=Integer.parseInt(id);
		Asset a=asi.findById(id1);
		a.setAssetState("2");
		asi.updateAsset(a);
		borrow.setAsset(a);
		String backtime=request.getParameter("backtime");		
		borrow.setBorrowReturnTimeAp(Utils.strToDate(backtime));
		Employee ee=new Employee();
		ee=ies.findEmployeeById(1);
		borrow.setEmployeeByBorrowAdminCheck(ee);
		borrow.setEmployeeByUserId(ee);
		borrow.setBorrowTime(new Date());
		borrow.setBorrowReturnTime(Utils.strToDate("0000-00-00"));
		borrow.setBorrowBorrowedTime(Utils.strToDate("0000-00-00"));
		borrow.setBorrowState("0");
		ibs.insertBorrow(borrow);
		return mapping.findForward("lend");
	}

     //列出申借审批资产
	public ActionForward lendinglist(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		Borrow borrow=new Borrow();
		List<Borrow> l= ibs.findAllBorrow(); 
		List<Borrow> als=new ArrayList();
		for(int i=0;i<l.size();i++)
		{
			borrow=(Borrow) l.get(i);
			if(borrow.getAsset().getAssetState().equals("2")&&borrow.getBorrowState().equals("0"))
			{
				borrow=ibs.findBorrowById(borrow.getBorrowId());
				als.add(borrow);
			}
		}
		request.setAttribute("bl", als);
		return mapping.findForward("lendinglist");
	}
    //审批申借同意
	public ActionForward lendagree(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		Asset rejectasset=new Asset();
		String id=request.getParameter("m");
		Integer id1=Integer.parseInt(id);
		rejectasset=asi.findById(id1);		
		rejectasset.setAssetState("1");
		asi.updateAsset(rejectasset);
		
		String b=request.getParameter("n");
		Integer bb=Integer.parseInt(b);
		Borrow borrow=ibs.findBorrowById(bb);
		borrow.setBorrowBorrowedTime(new Date());
		borrow.setAsset(rejectasset);
		borrow.setBorrowState("1");
		ibs.updateBorrow(borrow);
		System.out.print("资产借出时间："+borrow.getBorrowBorrowedTime());
		return mapping.findForward("lendagree");
	}
	//审批报修同意
	public ActionForward fixagree(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		Asset a=new Asset();
		String asset1=request.getParameter("n");
		Integer as=Integer.parseInt(asset1);
		a=asi.findById(as);
		a.setAssetState("3");
		asi.updateAsset(a);
		
		Fix rejectasset=new Fix();
		String id=request.getParameter("m");
		Integer id1=Integer.parseInt(id);
		rejectasset=ifs.findFixById(id1);		
		rejectasset.setFixTimeCheck(new Date());
		rejectasset.setAsset(a);
		rejectasset.setFixState("1");
		ifs.updateFix(rejectasset);
		return mapping.findForward("fixagree");
	}
	//审批报废同意
	public ActionForward rejectagree(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		Asset rejectasset=new Asset();
		String id=request.getParameter("m");
		Integer id1=Integer.parseInt(id);
		rejectasset=asi.findById(id1);		
		asi.deleteAsset(rejectasset);
		return mapping.findForward("rejectagree");
	}
	//审批申借驳回
	public ActionForward lendreject(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		Asset rejectasset=new Asset();
		String id=request.getParameter("m");
		Integer id1=Integer.parseInt(id);
		rejectasset=asi.findById(id1);		
		rejectasset.setAssetState("0");
		asi.updateAsset(rejectasset);
		return mapping.findForward("lendagree");
	}
	//审批报修驳回
	public ActionForward fixreject(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		Asset rejectasset=new Asset();
		String id=request.getParameter("m");
		Integer id1=Integer.parseInt(id);
		rejectasset=asi.findById(id1);		
		rejectasset.setAssetState("0");
		asi.updateAsset(rejectasset);
		return mapping.findForward("fixagree");
	}
	//审批报废驳回
	public ActionForward rejectreject(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		Asset rejectasset=new Asset();
		String id=request.getParameter("m");
		Integer id1=Integer.parseInt(id);
		rejectasset=asi.findById(id1);		
		rejectasset.setAssetState("0");
		asi.updateAsset(rejectasset);
		return mapping.findForward("rejectagree");
	}
	//列出添置审批
	public ActionForward addinglist(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		
		Asset asset=new Asset();
		List<Asset> l= asi.listAll(); 
		List<Asset> als=new ArrayList<Asset>();
		for(int i=0;i<l.size();i++)
		{
			asset=(Asset) l.get(i);
			if(asset.getAssetState().equals("7"))
			{
				asset=asi.findById(asset.getAssetId());
				als.add(asset);
			}
		}				
		request.setAttribute("al", als);
		return mapping.findForward("addinglist");
	}
	//列出报修审批
	public ActionForward fixinglist(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		
		Fix asset=new Fix();
		List<Fix> l= ifs.findFixAll(); 
		List<Fix> als=new ArrayList();
		for(int i=0;i<l.size();i++)
		{
			asset=(Fix) l.get(i);
			if(asset.getAsset().getAssetState().equals("4")&&asset.getFixState().equals("0"))
			{
				asset=ifs.findFixById(asset.getFixId());
				als.add(asset);
			}
		}				
		request.setAttribute("fl", als);
		return mapping.findForward("fixinglist");
	}
	//列出报废审批
	public ActionForward deletelist(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		
		Asset asset=new Asset();
		List<Asset> l= asi.listAll(); 
		List<Asset> als=new ArrayList();
		for(int i=0;i<l.size();i++)
		{
			asset=(Asset) l.get(i);
			if(asset.getAssetState().equals("5"))
			{
				asset=asi.findById(asset.getAssetId());
				als.add(asset);
			}
		}				
		request.setAttribute("al", als);
		return mapping.findForward("deletelist");
	}
	//列出已借出的资产
	public ActionForward lendedlist(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		Borrow borrow=new Borrow();
		List<Borrow> l= ibs.findAllBorrow(); 
		List<Borrow> als=new ArrayList<Borrow>();
		for(int i=0;i<l.size();i++)
		{
			borrow=(Borrow) l.get(i);
			if(borrow.getAsset().getAssetState().equals("1")&&borrow.getBorrowState().equals("1"))
			{
				borrow=ibs.findBorrowById(borrow.getBorrowId());
				als.add(borrow);
			}
		}
		request.setAttribute("bl", als);
		return mapping.findForward("lendedlist");
	}
	//归还资产
	public ActionForward back(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		Borrow backasset=new Borrow();
		String id=request.getParameter("m");
		Integer id1=Integer.parseInt(id);
		backasset=ibs.findBorrowById(id1);
		String assetid=request.getParameter("n");
		Integer assetid1=Integer.parseInt(assetid);
		Asset a=asi.findById(assetid1);		
		a.setAssetState("0");
		asi.updateAsset(a);
		backasset.setAsset(a);
		backasset.setBorrowReturnTime(new Date());
		backasset.setBorrowState("2");
		ibs.updateBorrow(backasset);
		System.out.println("资产归还时间"+backasset.getBorrowReturnTime());
		if(a.getAssetUseType().equals("0"))
		{
			Long totaltime=Utils.totalTime(a,backasset);
			System.out.println("归还时累计使用时间"+totaltime);
			String total=Long.toString(totaltime);
			a.setAssetUseTime(total);
		}
		asi.updateAsset(a);
		return mapping.findForward("back");
	}
}